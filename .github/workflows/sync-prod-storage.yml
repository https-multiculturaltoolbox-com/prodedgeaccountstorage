name: Sync Azure Blob (chunked) to Repo

on:
  workflow_dispatch:
    inputs:
      prefixes:
        description: "Space-separated prefixes to sync (use '.' for whole container)"
        required: true
        default: "."

permissions:
  contents: write

env:
  AZURE_STORAGE_ACCOUNT: ${{ secrets.AZURE_STORAGE_ACCOUNT }}
  AZURE_CONTAINER: ${{ secrets.AZURE_CONTAINER }}

jobs:
  sync:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure git
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config gc.auto 0
          git sparse-checkout disable || true
          git config advice.updateSparsePath false
          git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - name: Cleanup disk space (free ~20â€“30GB)
        run: |
          set -e
          sudo rm -rf /usr/share/dotnet || true
          sudo rm -rf /opt/ghc || true
          sudo rm -rf "/usr/local/share/boost" || true
          sudo apt-get clean || true
          docker system prune -af || true
          echo "Disk after cleanup:"
          df -h

      - name: Install AzCopy (v10)
        run: |
          set -e
          curl -sL https://aka.ms/downloadazcopy-v10-linux | tar -xz --strip-components=1
          sudo mv azcopy /usr/local/bin/azcopy
          azcopy --version

      - name: Download and commit per prefix (robust + root fallback)
        env:
          PREFIXES: ${{ github.event.inputs.prefixes }}
          AZURE_STORAGE_KEY: ${{ secrets.AZURE_STORAGE_KEY }}
        run: |
          set -euo pipefail

          : "${AZURE_STORAGE_KEY:?AZURE_STORAGE_KEY missing}"
          : "${AZURE_STORAGE_ACCOUNT:?AZURE_STORAGE_ACCOUNT missing}"
          : "${AZURE_CONTAINER:?AZURE_CONTAINER missing}"
          : "${PREFIXES:?No prefixes provided}"

          # File descriptor bump for busy runners
          ulimit -n 65536 || true

          # Put temp files on the large /mnt mount
          sudo mkdir -p /mnt/aztmp
          sudo chown "$USER":"$USER" /mnt/aztmp
          export TMPDIR=/mnt/aztmp

          # AzCopy auth & tuning
          export AZCOPY_ACCOUNT_KEY="${AZURE_STORAGE_KEY}"
          export AZCOPY_CONCURRENCY_VALUE=8            # use env var, not CLI flag
          export AZCOPY_LOG_LOCATION="${RUNNER_TEMP}/azcopy-logs"
          mkdir -p "$AZCOPY_LOG_LOCATION"

          echo "Temp dir: $TMPDIR"
          echo "AzCopy logs: $AZCOPY_LOG_LOCATION"

          TMPROOT="$(mktemp -d)"
          trap 'rm -rf "$TMPROOT"' EXIT

          HAD_ERRORS=0

          # Normalize input: allow '.' to represent the whole container
          IFS=$'\n'
          READ_PREFIXES=()
          for tok in $PREFIXES; do
            # trim trailing slash
            tok="${tok%/}"
            if [ -z "$tok" ] || [ "$tok" = "/" ]; then
              continue
            fi
            READ_PREFIXES+=("$tok")
          done

          if [ "${#READ_PREFIXES[@]}" -eq 0 ]; then
            echo "::error::No valid prefixes were provided."; exit 1
          fi

          for p in "${READ_PREFIXES[@]}"; do
            if [ "$p" = "." ]; then
              SRC_URL="https://${AZURE_STORAGE_ACCOUNT}.blob.core.windows.net/${AZURE_CONTAINER}"
              TARGET_DIR="."
              LABEL="(root)"
              DEST_LOCAL="${TMPROOT}/root"
            else
              SRC_URL="https://${AZURE_STORAGE_ACCOUNT}.blob.core.windows.net/${AZURE_CONTAINER}/${p}"
              TARGET_DIR="./$p"
              LABEL="$p"
              DEST_LOCAL="${TMPROOT}/${p}"
            fi

            echo "==> Processing prefix: $LABEL"
            echo "Free space before download:"
            df -h

            mkdir -p "$DEST_LOCAL"

            # Run AzCopy; don't hard-fail if it returns non-zero
            set +e
            if [ "$p" = "." ]; then
              azcopy copy "$SRC_URL" "$DEST_LOCAL" --recursive --log-level INFO
            else
              azcopy copy "$SRC_URL" "$DEST_LOCAL" --recursive --log-level INFO
            fi
            AC_STATUS=$?
            set -e

            # Summarize errors (if any)
            LASTLOG="$(ls -t "${AZCOPY_LOG_LOCATION}"/*.log 2>/dev/null | head -n1 || true)"
            if [ "$AC_STATUS" -ne 0 ]; then
              HAD_ERRORS=1
              echo "::warning::AzCopy returned $AC_STATUS for $LABEL. See $LASTLOG"
              if [ -n "$LASTLOG" ]; then
                echo "---- AzCopy error samples for $LABEL ----"
                tail -n 200 "$LASTLOG" | sed 's/^/LOG: /' || true
                echo "----------------------------------------"
              fi
            fi

            echo "==> Rsync into repo: $LABEL"
            mkdir -p "$TARGET_DIR"
            rsync -a "$DEST_LOCAL"/ "$TARGET_DIR"/ || true

            echo "==> Commit & push for $LABEL"
            git add "$TARGET_DIR"
            if ! git diff --cached --quiet -- "$TARGET_DIR"; then
              git commit -m "Sync from Azure ${LABEL} - $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
              # Rebase in case other jobs pushed meanwhile
              git pull --rebase --autostash || true
              git push
            else
              echo "No changes for ${LABEL}."
            fi

            echo "==> Clean temp for $LABEL (free disk)"
            rm -rf "$DEST_LOCAL"
            echo "Free space after cleanup:"
            df -h
          done

          echo "AzCopy logs at: $AZCOPY_LOG_LOCATION"

          # Optionally fail the job if any AzCopy errors occurred (after pushing changes)
          # if [ "$HAD_ERRORS" -ne 0 ]; then
          #   echo "::warning::Finished with AzCopy errors (see logs above)."
          #   exit 1
          # fi
