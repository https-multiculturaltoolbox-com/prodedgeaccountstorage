name: Sync Azure Blob (chunked) to Repo

on:
  workflow_dispatch:
    inputs:
      prefixes:
        description: "Space-separated prefixes (use '.' for whole container)"
        required: true
        default: "."

permissions:
  contents: write

env:
  AZURE_STORAGE_ACCOUNT: ${{ secrets.AZURE_STORAGE_ACCOUNT }}
  AZURE_CONTAINER: ${{ secrets.AZURE_CONTAINER }}

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Free disk (adds ~20–30GB)
        run: |
          sudo rm -rf /usr/share/dotnet /opt/ghc "/usr/local/share/boost" || true
          docker system prune -af || true
          sudo apt-get clean || true
          df -h

      # Clone the repo directly to /mnt (big disk)
      - name: Clone repository to /mnt
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          sudo mkdir -p /mnt/work
          sudo chown "$USER":"$USER" /mnt/work
          cd /mnt/work
          git clone --depth=1 "https://x-access-token:${GH_TOKEN}@github.com/${GITHUB_REPOSITORY}.git" repo
          cd repo
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config gc.auto 0
          git config advice.updateSparsePath false
          git sparse-checkout init --cone
          mkdir -p __keep__ && : > __keep__/.keep
          git sparse-checkout set __keep__

      - name: Install AzCopy (v10)
        run: |
          curl -sL https://aka.ms/downloadazcopy-v10-linux | tar -xz --strip-components=1
          sudo mv azcopy /usr/local/bin/azcopy
          azcopy --version

      - name: Download → slice copy → commit → drop (space-safe)
        working-directory: /mnt/work/repo
        env:
          PREFIXES: ${{ github.event.inputs.prefixes }}
          AZURE_STORAGE_KEY: ${{ secrets.AZURE_STORAGE_KEY }}
        run: |
          set -euo pipefail

          : "${AZURE_STORAGE_KEY:?AZURE_STORAGE_KEY missing}"
          : "${AZURE_STORAGE_ACCOUNT:?AZURE_STORAGE_ACCOUNT missing}"
          : "${AZURE_CONTAINER:?AZURE_CONTAINER missing}"
          : "${PREFIXES:?No prefixes provided}"

          # Use roomy /mnt for temp and logs
          TMPROOT="/mnt/aztmp"; mkdir -p "$TMPROOT"
          export AZCOPY_ACCOUNT_KEY="${AZURE_STORAGE_KEY}"
          export AZCOPY_CONCURRENCY_VALUE=8
          export AZCOPY_LOG_LOCATION="/mnt/aztmp/azcopy-logs"
          mkdir -p "$AZCOPY_LOG_LOCATION"

          commit_if_needed () {
            local label="$1"
            if ! git diff --cached --quiet -- .; then
              git commit -m "Sync slice: ${label} - $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
              git push
            else
              echo "No changes for ${label}."
            fi
          }

          process_dir () {
            local src_root="$1"  # temp root
            local rel_dir="$2"   # relative dir inside temp
            local tgt_prefix="$3" # "." or "./prefix"
            echo "  -> Dir slice: $rel_dir"
            git sparse-checkout set __keep__ "${tgt_prefix#./}/${rel_dir}"
            mkdir -p "${tgt_prefix}/${rel_dir}"
            rsync -a --delete "${src_root}/${rel_dir}/" "${tgt_prefix}/${rel_dir}/"
            git add -- "${tgt_prefix}/${rel_dir}"
            commit_if_needed "${rel_dir}"
            git sparse-checkout set __keep__
            git clean -fdx
            rm -rf "${src_root:?}/${rel_dir}"
          }

          process_files_batch () {
            local src_root="$1"; shift
            local tgt_prefix="$1"; shift
            local label="$1"; shift
            echo "  -> Files batch: $label"
            # Expand sparse view to include all batch files’ parent dirs
            patterns=( "__keep__" )
            for f in "$@"; do
              parent="$(dirname -- "$f")"
              [ "$parent" = "." ] || patterns+=( "${tgt_prefix#./}/${parent}" )
            done
            git sparse-checkout set -- "${patterns[@]}"

            # Copy the files
            for f in "$@"; do
              mkdir -p "${tgt_prefix}/$(dirname -- "$f")"
              rsync -a "${src_root}/${f}" "${tgt_prefix}/${f}"
            done

            git add -- "${tgt_prefix}"
            commit_if_needed "files:${label}"
            git sparse-checkout set __keep__
            git clean -fdx

            # Remove from temp
            for f in "$@"; do rm -f "${src_root}/${f}"; done
          }

          # Iterate requested prefixes
          for P in ${PREFIXES}; do
            P="${P%/}"
            if [ -z "$P" ] || [ "$P" = "/" ]; then continue; fi

            if [ "$P" = "." ]; then
              SRC_URL="https://${AZURE_STORAGE_ACCOUNT}.blob.core.windows.net/${AZURE_CONTAINER}"
              TARGET_DIR="."
              LABEL="(root)"
              DEST_LOCAL="$(mktemp -d "${TMPROOT%/}/root.XXXX")"
            else
              SRC_URL="https://${AZURE_STORAGE_ACCOUNT}.blob.core.windows.net/${AZURE_CONTAINER}/${P}"
              TARGET_DIR="./$P"
              LABEL="$P"
              DEST_LOCAL="$(mktemp -d "${TMPROOT%/}/${P//\//_}.XXXX")"
            fi

            echo "==> AzCopy: ${LABEL} -> ${DEST_LOCAL}"
            set +e
            azcopy copy "$SRC_URL" "$DEST_LOCAL" --recursive --log-level INFO
            AC=$?
            set -e
            if [ $AC -ne 0 ]; then
              echo "::warning::AzCopy returned $AC for $LABEL (see logs in $AZCOPY_LOG_LOCATION). Continuing."
            fi

            echo "==> Slice copy into repo: $LABEL"
            mkdir -p "$TARGET_DIR"

            # One directory per commit
            find "$DEST_LOCAL" -mindepth 1 -maxdepth 1 -type d -printf '%P\n' | sort | \
            while IFS= read -r d; do
              [ -n "$d" ] || continue
              process_dir "$DEST_LOCAL" "$d" "$TARGET_DIR"
              df -h
            done

            # Top-level files in batches of 200 (handles spaces safely enough for blob names)
            BATCH=()
            COUNT=0
            while IFS= read -r f; do
              BATCH+=("$f"); COUNT=$((COUNT+1))
              if [ $COUNT -ge 200 ]; then
                process_files_batch "$DEST_LOCAL" "$TARGET_DIR" "${BATCH[0]}..+$((${#BATCH[@]}-1))" "${BATCH[@]}"
                BATCH=(); COUNT=0; df -h
              fi
            done < <(find "$DEST_LOCAL" -mindepth 1 -maxdepth 1 -type f -printf '%P\n' | sort)

            if [ ${#BATCH[@]} -gt 0 ]; then
              process_files_batch "$DEST_LOCAL" "$TARGET_DIR" "${BATCH[0]}..+$((${#BATCH[@]}-1))" "${BATCH[@]}"
              BATCH=(); COUNT=0; df -h
            fi

            echo "==> Done prefix: $LABEL"
            rm -rf "$DEST_LOCAL"
            df -h
          done

          echo "AzCopy logs: $AZCOPY_LOG_LOCATION"

      - name: Final disk report
        run: df -h
