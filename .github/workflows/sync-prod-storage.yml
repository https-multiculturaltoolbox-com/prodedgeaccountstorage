name: Sync Azure Blob (chunked) to Repo

on:
  workflow_dispatch:
    inputs:
      prefixes:
        description: "Space-separated prefixes to sync (use '.' for whole container)"
        required: true
        default: "."

permissions:
  contents: write

env:
  AZURE_STORAGE_ACCOUNT: ${{ secrets.AZURE_STORAGE_ACCOUNT }}
  AZURE_CONTAINER:       ${{ secrets.AZURE_CONTAINER }}

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure git author
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          # Avoid sparse checkout warnings if repo has sparsity settings
          git sparse-checkout disable || true
          git config advice.updateSparsePath false || true

      # Optional but helpful on big jobs — frees ~15–20GB
      - name: Cleanup disk space before sync
        run: |
          set -euxo pipefail
          sudo rm -rf /usr/share/dotnet || true
          sudo rm -rf /opt/ghc || true
          sudo rm -rf "/usr/local/share/boost" || true
          sudo rm -rf "$AGENT_TOOLSDIRECTORY" || true
          sudo apt-get clean || true
          df -h

      - name: Install AzCopy (v10)
        run: |
          set -euo pipefail
          curl -sL https://aka.ms/downloadazcopy-v10-linux | tar -xz --strip-components=1
          sudo mv azcopy /usr/local/bin/azcopy
          azcopy --version

      - name: Download → commit (on /mnt, per-prefix; robust + cleans up)
        env:
          PREFIXES:           ${{ github.event.inputs.prefixes }}
          AZURE_STORAGE_KEY:  ${{ secrets.AZURE_STORAGE_KEY }}
        run: |
          set -euo pipefail

          : "${AZURE_STORAGE_KEY:?AZURE_STORAGE_KEY missing}"
          : "${AZURE_STORAGE_ACCOUNT:?AZURE_STORAGE_ACCOUNT missing}"
          : "${AZURE_CONTAINER:?AZURE_CONTAINER missing}"
          : "${PREFIXES:?No prefixes provided}"

          echo "==> Free space before move"
          df -h

          # Put repo and all temps on /mnt (large disk)
          sudo mkdir -p /mnt/work /mnt/aztmp
          sudo chown "$USER":"$USER" /mnt/work /mnt/aztmp

          REPO_SRC="${GITHUB_WORKSPACE}"
          REPO_DIR="/mnt/work/$(basename "${GITHUB_WORKSPACE}")"
          rsync -a --delete "${REPO_SRC}/" "${REPO_DIR}/"
          cd "${REPO_DIR}"

          # Ensure git works after move
          git status >/dev/null

          # AzCopy tuning & logs OUTSIDE the repo (avoid sparse warnings)
          export AZCOPY_ACCOUNT_KEY="${AZURE_STORAGE_KEY}"
          export AZCOPY_CONCURRENCY_VALUE=8
          export AZCOPY_LOG_LOCATION="${RUNNER_TEMP}/azcopy-logs"
          mkdir -p "${AZCOPY_LOG_LOCATION}"

          # Stable file handles on busy runners
          ulimit -n 65536 || true

          TMPBASE="/mnt/aztmp/${GITHUB_RUN_ID}-${GITHUB_RUN_ATTEMPT}"
          mkdir -p "${TMPBASE}"

          HAD_ERRORS=0

          echo "==> Free space after move"
          df -h

          for p in ${PREFIXES}; do
            if [ "$p" = "." ] || [ "$p" = "/" ] || [ -z "$p" ]; then
              SRC_URL="https://${AZURE_STORAGE_ACCOUNT}.blob.core.windows.net/${AZURE_CONTAINER}"
              TARGET_DIR="."
              LABEL="(root)"
              DEST_LOCAL="${TMPBASE}/root"
            else
              # normalize trailing slash for AzCopy
              CLEAN_P="${p#/}"; CLEAN_P="${CLEAN_P%/}"
              SRC_URL="https://${AZURE_STORAGE_ACCOUNT}.blob.core.windows.net/${AZURE_CONTAINER}/${CLEAN_P}"
              TARGET_DIR="./${CLEAN_P}"
              LABEL="${CLEAN_P}"
              DEST_LOCAL="${TMPBASE}/${CLEAN_P}"
            fi

            echo "==> Processing: ${LABEL}"
            mkdir -p "${DEST_LOCAL}"

            set +e
            azcopy copy "${SRC_URL}" "${DEST_LOCAL}" --recursive --log-level INFO
            AC_STATUS=$?
            set -e

            # Show brief log context if non-zero
            LASTLOG="$(ls -t "${AZCOPY_LOG_LOCATION}"/*.log 2>/dev/null | head -n1 || true)"
            if [ "${AC_STATUS}" -ne 0 ]; then
              HAD_ERRORS=1
              echo "::warning::AzCopy returned ${AC_STATUS} for ${LABEL}. See ${LASTLOG}"
              if [ -n "${LASTLOG}" ]; then
                echo "---- AzCopy error tail (${LABEL}) ----"
                tail -n 200 "${LASTLOG}" | sed 's/^/LOG: /'
                echo "--------------------------------------"
              fi
              # If the prefix doesn't exist, skip gracefully
              if grep -qi "failed to initialize enumerator: The specified file was not found" <<<"${LASTLOG:+$(tail -n 200 "${LASTLOG}")}"; then
                echo "Prefix ${LABEL} not found in container; skipping."
                rm -rf "${DEST_LOCAL}"
                continue
              fi
            fi

            echo "==> Rsync into repo: ${LABEL}"
            mkdir -p "${TARGET_DIR}"
            # Use --inplace to keep IO lower; avoid socket IO 'Broken pipe' spikes
            rsync -a --inplace "${DEST_LOCAL}/" "${TARGET_DIR}/" || {
              echo "::warning::rsync had issues for ${LABEL}. Retrying once..."
              rsync -a --inplace "${DEST_LOCAL}/" "${TARGET_DIR}/"
            }

            echo "==> Git add/commit/push for ${LABEL}"
            # If repo had sparsity rules, make sure we can stage everything
            git sparse-checkout disable || true

            git add "${TARGET_DIR}"
            if ! git diff --cached --quiet -- "${TARGET_DIR}"; then
              git commit -m "Sync from Azure ${LABEL} - $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
              # Push now to free space ASAP
              git push
              # Compact objects to free disk space quickly
              git gc --prune=now --aggressive || true
            else
              echo "No changes for ${LABEL}."
            fi

            echo "==> Clean temp slice: ${LABEL}"
            rm -rf "${DEST_LOCAL}"
            echo "==> Free space snapshot"
            df -h
          done

          echo "AzCopy logs at: ${AZCOPY_LOG_LOCATION}"

          # If you prefer the job to fail when any AzCopy errors happened, uncomment:
          # if [ "${HAD_ERRORS}" -ne 0 ]; then exit 1; fi
